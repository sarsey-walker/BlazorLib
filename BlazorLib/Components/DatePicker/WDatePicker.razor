@using System.Globalization

@inherits WBaseDate

@if (ShowInput)
{
    <div class="w-input-control-container">
        <div class="w-input w-input-text w-input-underline">
            <input class="w-input-slot w-input-root w-input-root-text w-input-root-adorned-end"
                   type="text" inputmode="text"
                   @onchange="@OnChange"
                   value="@FormatValueAsString(Date)">

            <div>
                <button aria-label="Open Date Picker" tabindex="-1" type="button"
                        class="w-button-root w-icon-button w-ripple w-ripple-icon w-icon-button-edge-end">
                    <span class="w-icon-button-label">
                        <WIcon Icon="@Icon.Event" Color="red" />
                    </span>
                </button>
            </div>
        </div>
        <label class="w-input-label w-input-label-animated w-input-label-text">@Title</label>
    </div>
}
@if (showCalendar)
{

    <CustomCalendar Date="@Date"
                    DateFormat="@DateFormat"
                    FirstDayOfWeek="@FirstDayOfWeek"
                    DateChanged="@DateChanged"
                    MonthChanged="@MonthChanged"
                    MarkedDays="MarkedDays"
                    Class="@Class"
                    Style="@Style"
                    Fill="true" />
}

@code {
    CultureInfo provider = CultureInfo.InvariantCulture;

    [Parameter] public string? Title { get; set; }
    [Parameter] public bool ShowInput { get; set; } = false;

    private Task OnChange(ChangeEventArgs args)
    {
        try
        {
            var date = args?.Value?.ToString();
            if (date != null)
            {
                Date = DateTime.ParseExact(date!, DateFormat, provider);
                DateChanged.InvokeAsync(Date);
            }
            return Task.CompletedTask;
        }
        catch
        {
            Date = default(DateTime)!;
            DateChanged.InvokeAsync(Date);
            return Task.CompletedTask;
        }
    }
    protected string FormatValueAsString(DateTime? value)
    {
        switch (value)
        {
            case DateTime dateTimeValue:
                var r = BindConverter.FormatValue(dateTimeValue, DateFormat, provider);
                return r;
            default:
                return string.Empty;
        }
    }

    private bool showCalendar = true;
    private void OpenCalendar()
    {
        showCalendar = !showCalendar;
    }
}
